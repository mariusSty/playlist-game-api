// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(uuid())
  name       String?
  room       Room?   @relation("users", fields: [roomId], references: [id])
  roomId     Int?
  pick       Pick[]
  guessed    Guess[] @relation("guessed")
  guesses    Guess[] @relation("guesses")
  roomHost   Room?   @relation("host")
  roomHostId Int?
  Round      Round[]
}

model Room {
  id     Int    @id @default(autoincrement())
  pin    String @unique
  users  User[] @relation("users")
  host   User   @relation("host", fields: [hostId], references: [id])
  hostId String @unique
  game   Game?
}

model Game {
  id            Int     @id @default(autoincrement())
  roomId        Int     @unique
  room          Room    @relation(fields: [roomId], references: [id])
  isFinished    Boolean @default(false)
  round         Round[]
  actualRound   Round?  @relation("actual", fields: [actualRoundId], references: [id])
  actualRoundId Int?
}

model Round {
  id            Int     @id @default(autoincrement())
  gameId        Int
  game          Game    @relation(fields: [gameId], references: [id])
  actualGames   Game[]  @relation("actual")
  themeId       Int?
  theme         Theme?  @relation(fields: [themeId], references: [id])
  isFinished    Boolean @default(false)
  stepId        Int
  step          Step    @relation(fields: [stepId], references: [id])
  pick          Pick[]
  guess         Guess[]
  themeMaster   User    @relation(fields: [themeMasterId], references: [id])
  themeMasterId String
}

model Theme {
  id              Int     @id @default(autoincrement())
  description     String
  isCreatedByUser Boolean @default(false)
  round           Round[]
}

model Song {
  id     Int    @id @default(autoincrement())
  title  String
  artist String
  url    String
  pick   Pick[]
}

model Pick {
  id      Int    @id @default(autoincrement())
  round   Round  @relation(fields: [roundId], references: [id])
  roundId Int
  song    Song   @relation(fields: [songId], references: [id])
  songId  Int
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@unique([roundId, userId])
}

model Guess {
  id            Int    @id @default(autoincrement())
  round         Round  @relation(fields: [roundId], references: [id])
  roundId       Int
  guessedUser   User   @relation(fields: [guessedUserId], references: [id], name: "guessed")
  guessedUserId String
  guessUser     User   @relation(fields: [guessUserId], references: [id], name: "guesses")
  guessUserId   String
}

model Step {
  id    Int     @id @default(autoincrement())
  name  String
  round Round[]
}
